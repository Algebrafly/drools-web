package com.sky.bluesky.mybatis;import org.apache.ibatis.executor.Executor;import org.apache.ibatis.mapping.MappedStatement;import org.apache.ibatis.plugin.*;import org.apache.ibatis.session.ResultHandler;import org.apache.ibatis.session.RowBounds;import java.util.Properties;/** * SQL监控，Mybatis插件 * <p>默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p> * <ul><li>拦截执行器的方法，Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</li> * <li>拦截参数的处理，ParameterHandler (getParameterObject, setParameters)</li> * <li>拦截结果集的处理，ResultSetHandler (handleResultSets, handleOutputParameters)</li> * <li>拦截Sql语法构建的处理，StatementHandler (prepare, parameterize, batch, update, query)</li></ul> * * @author BBF */@Intercepts({        @Signature(type = Executor.class, method = "update", args = {MappedStatement.class,                Object.class}),        @Signature(type = Executor.class, method = "query", args = {MappedStatement.class,                Object.class, RowBounds.class, ResultHandler.class})})public class SQLMonitorPlugin implements Interceptor {    public SQLMonitorPlugin() {    }    public Object intercept(Invocation invocation) throws Throwable {        return MyBatisSQLMonitorPlugin.intercept(invocation);    }    public Object plugin(Object target) {        return Plugin.wrap(target, this);    }    public void setProperties(Properties properties) {    }}